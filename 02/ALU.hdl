// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put your code here:
   Mux16(a = x, b[0..15] = false, sel = zx, out = w1);
   Not16(in = w1, out = notx);
   Mux16(a = w1, b = notx, sel = nx, out = w2);
   Mux16(a = y, b[0..15] = false, sel = zy, out = w3);
   Not16(in = w3, out = noty);
   Mux16(a = w3, b = noty, sel = ny, out = w4);
   Add16(a = w2, b = w4, out = w5);
   And16(a = w2, b = w4, out = w6);
   Mux16(a = w6, b = w5, sel = f, out = w7);
   Not16(in = w7, out = w8);
   Mux16(a = w7, b = w8, sel = no, out[0..7] = w9, out[8..15] = w13);
   Or8Way(in = w9, out = w10);
   Or8Way(in = w13, out = w11);
   Or(a = w10, b = w11, out = w12);
   Not(in = w12, out = zr);
   And16(a = true, b[0..7] = w9, b[8..15] = w13, out = out);
   Not16(in[0..7] = w9, in[8..15] = w13, out[0..14] = w14, out[15] = w15);
   Not(in = w15, out = w16);
   And(a = true, b = w16, out = ng);
}
